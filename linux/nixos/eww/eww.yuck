(defwidget bar []
  (centerbox :orientation "h"
    (leftsidestuff)
    (box :orientation "h"
         :space-evenly false
         :halign "end")
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (audio)
    (label :class "separator" :text "")
    (temps)
    (label :class "separator" :text "")
    (box :class "systray"
          :orientation "h"
          :space-evenly false
          :halign "end"
          :visible { is-tray-visible == "true" }
          (label :class "systray-icon" :text " ")
         (systray))
         (locale)
         (date)
         (powermenu-toggle)))

(defwidget leftsidestuff []
    (box :class "leftsidestuff"
         :orientation "h"
         :space-evenly false
         :halign "start"
         (launcher)
         (workspaces)
    ))

(defwidget launcher []
  (button :class "launcher"
          :onclick "rofi -show drun &"
          " "))

(defwidget temps []
  (box :class "temps"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (label :class "temps-icon" :text "󱌚 ")
    (label :class "cpu"
           :text "C: ${cpu}°C")
    (label :class "gpu"
           :text "G: ${gpu}°C")
    (label :text "R: ${memory}%")))
    

(defwidget locale []
  (box :class "locale"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (label :class "locale-icon" :text " ")
    (label :class "locale-text"
           :text "${locale}")))

(defwidget date []
  (eventbox :onclick "eww open --toggle calendar"
            (box :class "date"
                 :orientation "h"
                 :space-evenly false
                 :halign "end"
              (label :class "date-icon" :text " ")
              (label :text time))))

(defwidget audio []
  (box :class "audio"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (label :class "audio-icon" :text {is-muted == "true" ? "󰽠 " : "󰽟 "})
    (metric :class "metric"
            :label "${output-name}"
            :value volume
            :onclick "pavucontrol &"
            :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")))

(defwidget workspaces []
  (eventbox
      :onscroll `bash scripts/change-workspace {}`
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
    (for workspace in workspace-list
      (button :class {(workspace.focused ? "active" : workspace.urgent ? "urgent" : "")}
              :onclick "swaymsg workspace ${workspace.name}"
              "${workspace.name}")))))

(defwidget metric [class label value onchange onclick]
  (box :orientation "h"
       :class class
       :space-evenly false
    (button :class "label"
            :onclick onclick
            label)
    (scale :min 0
           :max 154
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget powermenu-toggle []
  (powermenubutton :class "powermenu-toggle"
                   :onclick "rofi -show powermenu &"
                   :label "󰐥"))

(defwidget powermenubutton [class label onclick]
 (button :class class
         :onclick onclick
          "${label}"))


;; Listen variables
(deflisten volume :initial "0" "bash scripts/get-volume")
(deflisten is-muted :initial "false" "bash scripts/get-is-muted")
(deflisten workspace-list :initial "[]" "bash scripts/get-workspaces")

;; Polling variables
(defpoll cpu :interval "1s" "bash scripts/get-cpu-temp")
(defpoll gpu :interval "1s" "bash scripts/get-gpu-temp")
(defpoll output-name :interval "1s" "bash scripts/get-output-name")
(defpoll is-tray-visible :interval "1s" "bash scripts/get-systray-status")
(defpoll locale :interval "1s" "bash scripts/get-locale")
(defpoll memory :interval "1s" "bash scripts/get-ram")
(defpoll time :interval "1s" "date '+%A, %d %b %Y, %H:%M'")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "8px"
                      :width "100%"
                      :anchor "top center")
  :stacking "bg"
  :reserve (struts :distance "0px" :side "top")
  :exclusive true
  :windowtype "dock"
(bar))

(defwindow calendar
  :monitor 0
  :geometry (geometry :x "50px"
                      :y "8px"
                      :width "200px"
                      :anchor "top right")
  :stacking "fg"
  :wm-ignore true
  (calendar))

