(defwidget bar []
  (centerbox :orientation "h"
    (leftbar)
    (centerbar)
    (rightbar)))

(defwidget leftbar []
  (box :class "leftbar"
       :orientation "h"
       :space-evenly false
       :halign "start"
    (launcher)
    (workspaces)))

(defwidget centerbar [] (box))
(defwidget rightbar []
  (box :class "rightbar"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (audio)
    (temps)
    (tray)
    (locale)
    (date)))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;                     ;;
;;   Leftbar Content   ;;
;;                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(defwidget launcher []
  (button :class "launcher"
          :onclick "rofi -show drun &"
          " "))

(defwidget workspaces []
  (eventbox
      :onscroll `bash scripts/change-workspace {}`
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
    (for workspace in workspace-list
      (button :class {(workspace.focused ? "active" : workspace.urgent ? "urgent" : "")}
              :onclick "swaymsg workspace ${workspace.name}"
              "${workspace.name}")))))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;                     ;;
;;   Rightbar Content  ;;
;;                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(defwidget date []
  (eventbox :onclick "eww open --toggle calendar"
            (box :class "date"
                 :orientation "h"
                 :space-evenly false
                 :halign "end"
              (label :text time))))

(defwidget tray []
  (box :class "tray"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (systray)))


(defwidget locale []
  (box :class "locale"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (label :class "locale-text"
           :text "   ${locale}")))

(defwidget temps []
  (box :class "temps"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (label :class "cpu"
           :text " ${cpu}°C ")
    (label :class "gpu"
           :text "  ${gpu}°C ")
    (label :class "ram"
           :text "  ${memory}% ")))

(defwidget audio []
  (box :class "audio"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (label :class "audio-icon" :text {is-muted == "true" ? "  " : "  "})
    (metric :class "audio"
            :label "${output-name}"
            :value volume
            :btnclass "audio-button"
            :onclick "pavucontrol &"
            :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}% && bash ../sway/scripts/volume-notify.sh")))

(defwidget metric [class label value btnclass onchange onclick]
  (box :orientation "h"
       :class class
       :space-evenly false
    (button :class btnclass
            :onclick onclick
            label)
    (scale :min 0
           :max 154
           :active {onchange != ""}
           :value value
           :onchange onchange)))



;; Listen variables
(deflisten volume :initial "0" "bash scripts/get-volume")
(deflisten is-muted :initial "false" "bash scripts/get-is-muted")
(deflisten workspace-list :initial "[]" "bash scripts/get-workspaces")

;; Polling variables
(defpoll cpu :interval "1s" "bash scripts/get-cpu-temp")
(defpoll gpu :interval "1s" "bash scripts/get-gpu-temp")
(defpoll output-name :interval "1s" "bash scripts/get-output-name")
(defpoll is-tray-visible :interval "1s" "bash scripts/get-systray-status")
(defpoll locale :interval "1s" "bash scripts/get-locale")
(defpoll memory :interval "1s" "bash scripts/get-ram")
(defpoll time :interval "1s" "date '+%A, %d %b %Y, %H:%M'")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0px"
                      :y "0px"
                      :width "100%"
                      :anchor "top center")
  :stacking "bg"
  :reserve (struts :distance "0px" :side "top")
  :exclusive true
  :windowtype "dock"
(bar))

(defwindow calendar
  :monitor 0
  :geometry (geometry :x "0px"
                      :y "8px"
                      :width "200px"
                      :anchor "top right")
  :stacking "fg"
  :wm-ignore true
  (calendar))

